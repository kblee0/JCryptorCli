/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.home.jcryptor;

import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.charset.StandardCharsets;
import java.nio.file.Paths;

import com.home.jcryptor.encryptor.*;
import com.home.jcryptor.encryptor.modules.*;
import picocli.CommandLine;
import picocli.CommandLine.Command;
import picocli.CommandLine.Option;
import picocli.CommandLine.Parameters;


@Command(name = "jCryptorCli", mixinStandardHelpOptions = true, version = "jCryptorCli v1.0")
public class JCryptorCli implements Runnable {
    @Option(names = {"-t"}, paramLabel = "encryptor", 
        defaultValue = "prop", description = "Encryptor type. <prop|db|rsapri|rsapub>. default is prop")
    String encType;

    @Option(names = {"-d"}, description = "decrypt mode")
    boolean decryptMode;

    @Option(names = { "-p"}, description = "Password")
    String password;

    @Option(names = {"-f", "--passfile"}, description = "Read a password text file.")
    String passwordFilePath;

    @Option(names = {"-m", "--pem"}, description = "Read a PEM key file.")
    String pemKeyFilePath;

    // <algorithm> <key> <comment>
    @Option(names = {"-s", "--sshpub"}, description = "Read an OpenSSH PublicKey file.")
    String sshPublicKeyFilePath;

    @Option(names = {"-i"}, description = "Input CSV file name")
    String inputFileName;

    @Option(names = {"-o"}, description = "Output CSV file name")
    String outputFileName;

    @Option(names = {"--test"}, description = "Test", hidden = true)
    boolean test;

    @Parameters(paramLabel = "message", defaultValue = "", description = "String to be encrypted or decrypted.")
    String message;

    public void test() {
        try {
            String message = "kblee@gmail.com";
            String encryptedMessage;
            String decryptedMessage;

            Encryptor encryptor = new JasyptEncryptor().setPassword("iap.123$");
            encryptedMessage = encryptor.encrypt(message);
            decryptedMessage = encryptor.decrypt(encryptedMessage);
            System.out.println("JasyptEncryptor.encrypt: " + encryptedMessage);
            System.out.println("JasyptEncryptor.decrypt: " + decryptedMessage);

            encryptor = new AES128Encryptor().setPassword("1234567890123456");
            encryptedMessage = encryptor.encrypt(message);
            decryptedMessage = encryptor.decrypt(encryptedMessage);
            System.out.println("AES128Encryptor.encrypt: " + encryptedMessage);
            System.out.println("AES128Encryptor.decrypt: " + decryptedMessage);
            if(inputFileName!= null) {
                CsvEncryptor csv = new CsvEncryptor();

                csv.doProc(inputFileName, null);
            }
        } catch(Exception e) {
            System.err.println(e.getMessage());
        }
    }

    @Override
    public void run() {
        try {
            int procMode = decryptMode ? Encryptor.DECRYPT_MODE : Encryptor.ENCRYPT_MODE;

            if(test) {
                this.test();
                return;
            }
            if(pemKeyFilePath != null) {
                password = Encryptor.readPemFile(pemKeyFilePath);
            }
            if(sshPublicKeyFilePath != null) {
                password = Encryptor.readOpenSSHPublicKeyFile(sshPublicKeyFilePath);
            }
            if(passwordFilePath != null) {
                password = Files.lines(Paths.get(passwordFilePath), StandardCharsets.UTF_8).findFirst().orElse("").trim();
            }

            if(password == null) {
                CommandLine.usage(this, System.out);
                return;
            }
            Encryptor encryptor = switch (encType) {
                case "prop" -> new JasyptEncryptor(procMode, password);
                case "db" -> new AES128Encryptor(procMode, password);
                case "rsapriv" -> new RSAPrivateEncryptor(procMode, password);
                case "rsapub" -> new RSAPublicEncryptor(procMode, password);
                default -> null;
            };

            if(encryptor == null) {
                CommandLine.usage(this, System.out);
                return;
            }
            if(inputFileName != null) {
                CsvEncryptor csvEncryptor = new CsvEncryptor(encryptor);
                csvEncryptor.doProc(inputFileName, outputFileName);
            }
            else if(!message.isEmpty()){
                System.out.println(encryptor.doProc(message));
            }
            else {
                CommandLine.usage(this, System.out);
            }
        } catch(Exception e) {
            System.err.println(e.getMessage());
        }
    }

    public static void main(String...args) {
        int exitCode = new CommandLine(new JCryptorCli()).execute(args);

        System.exit(exitCode);
    }
}
